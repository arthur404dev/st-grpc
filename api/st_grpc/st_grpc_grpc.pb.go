// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package st_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiveMessageServiceClient is the client API for LiveMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveMessageServiceClient interface {
	StreamMessages(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (LiveMessageService_StreamMessagesClient, error)
}

type liveMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveMessageServiceClient(cc grpc.ClientConnInterface) LiveMessageServiceClient {
	return &liveMessageServiceClient{cc}
}

func (c *liveMessageServiceClient) StreamMessages(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (LiveMessageService_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LiveMessageService_ServiceDesc.Streams[0], "/st_grpc.LiveMessageService/StreamMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &liveMessageServiceStreamMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LiveMessageService_StreamMessagesClient interface {
	Recv() (*LiveMessage, error)
	grpc.ClientStream
}

type liveMessageServiceStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *liveMessageServiceStreamMessagesClient) Recv() (*LiveMessage, error) {
	m := new(LiveMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LiveMessageServiceServer is the server API for LiveMessageService service.
// All implementations must embed UnimplementedLiveMessageServiceServer
// for forward compatibility
type LiveMessageServiceServer interface {
	StreamMessages(*StreamRequest, LiveMessageService_StreamMessagesServer) error
	mustEmbedUnimplementedLiveMessageServiceServer()
}

// UnimplementedLiveMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLiveMessageServiceServer struct {
}

func (UnimplementedLiveMessageServiceServer) StreamMessages(*StreamRequest, LiveMessageService_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedLiveMessageServiceServer) mustEmbedUnimplementedLiveMessageServiceServer() {}

// UnsafeLiveMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveMessageServiceServer will
// result in compilation errors.
type UnsafeLiveMessageServiceServer interface {
	mustEmbedUnimplementedLiveMessageServiceServer()
}

func RegisterLiveMessageServiceServer(s grpc.ServiceRegistrar, srv LiveMessageServiceServer) {
	s.RegisterService(&LiveMessageService_ServiceDesc, srv)
}

func _LiveMessageService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LiveMessageServiceServer).StreamMessages(m, &liveMessageServiceStreamMessagesServer{stream})
}

type LiveMessageService_StreamMessagesServer interface {
	Send(*LiveMessage) error
	grpc.ServerStream
}

type liveMessageServiceStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *liveMessageServiceStreamMessagesServer) Send(m *LiveMessage) error {
	return x.ServerStream.SendMsg(m)
}

// LiveMessageService_ServiceDesc is the grpc.ServiceDesc for LiveMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "st_grpc.LiveMessageService",
	HandlerType: (*LiveMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _LiveMessageService_StreamMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/st_grpc/st_grpc.proto",
}
